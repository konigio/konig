@prefix konig: <http://www.konig.io/ns/core/> .
@prefix aws:   <http://www.konig.io/ns/aws/> .
@prefix schema:  <http://schema.org/> .
#if($!{parentComponent})
#set ( $namespaceList = $functions.listNamespaces($parentComponent) )
#foreach( $namespace in $namespaceList) 
@prefix $namespace.Prefix: <$namespace.Name> .
#end
#end

<https://amazonaws.konig.io/s3/bucket/${beginVar}environmentName${endVar}-${bucketKey}>
	a konig:S3Bucket, konig:DataSource;
	aws:bucketKey "${bucketKey}";
	aws:bucketName "${beginVar}environmentName${endVar}-${bucketKey}";
	aws:region "${aws-region}";
	aws:bucketMediaType "${bucketMediaType}";
	aws:notificationConfiguration [
	  aws:topicConfiguration [
	    aws:topic <arn:aws:sns:${aws-region}:${aws-account-id}:${shapeLocalName}_CreateEvent> ;
	    aws:eventType "s3:ObjectCreated:*";
	  ];
	   aws:queueConfiguration [
	    aws:queue <arn:aws:sqs:${aws-region}:${aws-account-id}:${shapeLocalName}_CreateEvent> ;
	    aws:eventType "s3:ObjectCreated:*";
	  ]
  	];
  	#if($!{parentComponent}) 
	schema:isPartOf $functions.spaceToComma(${parentComponent});
	#end
	.
  	
<arn:aws:sns:${aws-region}:${aws-account-id}:${shapeLocalName}_CreateEvent> 
  rdf:type aws:Topic ;
  aws:resourceName "${shapeLocalName}_CreateEvent" ;
  aws:region "${aws-region}" ;
  aws:accountId "${aws-account-id}" .

<arn:aws:sqs:${aws-region}:${aws-account-id}:${shapeLocalName}_CreateEvent>
  rdf:type aws:Queue ;
  aws:resourceName "${shapeLocalName}_CreateEvent" ;
  aws:region "${aws-region}" ;
  aws:accountId "${aws-account-id}" .
  
<${shapeId}> konig:shapeDataSource
	<https://amazonaws.konig.io/s3/bucket/${beginVar}environmentName${endVar}-${bucketKey}>,
	
.


