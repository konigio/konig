Formula ::= Prologue Expression

Prologue	  ::=  	( PrefixDecl | ContextDecl | TermDecl )*

PrefixDecl	::=  	('PREFIX' PNAME_NS IRIREF | '@' PNAME_NS ':' IRIREF '.')

TermDecl ::= '@term' TermKey IRI

ContextDecl ::= '@context' '{' (Term)+ '}'

Term ::= JsonString ':' TermValue 

JsonString ::= '"' JsonChar* '"'

JsonChar ::= UnescapedJsonChar | EscapedJsonChar

UnescapedJsonChar ::= [#x20-#x21] | [#x23-#x5b] | [#x5D=#x10FFF]

EscapedJsonChar ::= '\' ( ["\\bfnrt] | 'u' HEX HEX HEX HEX )

TermValue ::= JsonString | ExpandedTerm

ExpandedTerm ::= '{' (JsonldKeyword ':' JsonString)* '}'

JsonldKeyword ::= '@id' | '@type' | '@language'

Expression	  ::=  	ConditionalOrExpression

QuantifiedExpression ::= Expression WhereClause?

WhereClause := 'WHERE' (Triple)+

Triple ::= PathTerm IRI PathTerm '.'

ConditionalOrExpression	  ::=  	ConditionalAndExpression ( OrOperator ConditionalAndExpression )*

OrOperator ::= '||' | 'OR'

ConditionalAndExpression	  ::=  	ValueLogical ( AndOperator ValueLogical )*

AndOperator ::= '&&' | 'AND'

ValueLogical	  ::=  	RelationalExpression

RelationalExpression	  ::=  	
	NumericExpression ( 
			'=' NumericExpression 
		| '!=' NumericExpression 
		| '<' NumericExpression 
		| '>' NumericExpression 
		| '<=' NumericExpression 
		| '>=' NumericExpression
		| 'IN' ExpressionList
		| 'NOT' 'IN' ExpressionList
		| '?' NumericExpression '|' NumericExpression
	)?

ExpressionList ::= '(' Expression ( ',' Expression )* ')'
		
NumericExpression	  ::=  	AdditiveExpression

AdditiveExpression	  ::=  	
	MultiplicativeExpression ( 
			'+' MultiplicativeExpression 
		| '-' MultiplicativeExpression 
	)*

MultiplicativeExpression	  ::=  	UnaryExpression ( '*' UnaryExpression | '/' UnaryExpression )*

UnaryExpression	  ::=  	  
		'!' PrimaryExpression 
	|	'+' PrimaryExpression 
	|	'-' PrimaryExpression 
	|	PrimaryExpression
	
PrimaryExpression	  ::=  	BrackettedExpression | BuiltInCall | Path | Literal | IRI | CURIE

BrackettedExpression	  ::=  	'(' Expression ')'

Path	::= (InStep | PathTerm) ( OutStep | InStep | HasStep)*

PathTerm ::= IRI | CURIE | LocalName | Variable

HasStep ::= '[' PredicateObjectList ']'

PredicateObjectList ::= Verb ObjectList ( ';' (Verb ObjectList)?)*

Verb ::= IRI | CURIE | LocalName

ObjectList ::= Object (',' Object)*

Object ::= Expression 

Variable ::= '?' [a-zA-Z][a-zA-Z0-9]*

OutStep ::= '.' PathTerm

InStep ::= '^' PathTerm

BuiltInCall ::= 
		'IF' '(' Expression ',' Expression ',' Expression  ')'
	| 'SUM' '(' Expression ')' 
	| 'AVG' '(' Expression ')' 
	| 'BOUND' '(' Variable | Path ')'
